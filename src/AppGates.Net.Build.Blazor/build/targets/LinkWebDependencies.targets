<Project>

	<UsingTask
    TaskName="ManageLinks"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
		<Task>
			<Code Type="class" Language="cs">
				<![CDATA[
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;

public class ManageLinks: Task
{
    [Required]
    public string ProjectDirectoryPath { get; set; }

    [Required]
    public ITaskItem[] Links { get; set; }

    public override bool Execute()
    {
        if (string.IsNullOrEmpty(this.ProjectDirectoryPath))
        {
            return true;
        }
        var linkComment= "# auto-generated debug link - don't modifiy this and the next line, remove the dependency instead";
        var projectDirectory = CreateDirectoryInfo(this.ProjectDirectoryPath);

        void Log(string message) => this.Log.LogMessage(MessageImportance.High, message);
        Log($"Manage debug and compile links for project '{projectDirectory.FullName}' ...");

        IEnumerable<(DirectoryInfo LinkedDirectory, Action RemoveLink)> GetLinks(DirectoryInfo projectDir, string linkCom,IList<string> gitIgnoreLines)
        {
            for (int lineIndexTmp = 0; lineIndexTmp < gitIgnoreLines.Count; ++lineIndexTmp)
            {
                var lineIndex = lineIndexTmp;
                var line = gitIgnoreLines[lineIndex];
                if (line.Equals(linkCom))
                {
                    var path = Path.Combine(projectDir.FullName,
                        gitIgnoreLines[lineIndex + 1].Replace('/', Path.DirectorySeparatorChar).Trim(Path.DirectorySeparatorChar));
                    var absoluteIgnoreDirectory = CreateDirectoryInfo(path);
                    Log($"Found link definition '{absoluteIgnoreDirectory.FullName}'");

                    yield return (absoluteIgnoreDirectory, () =>
                    {
                        // remove it
                        gitIgnoreLines[lineIndex] = null;
                        gitIgnoreLines[lineIndex + 1] = null;
                        absoluteIgnoreDirectory.Delete(true);
                    }
                    );
                }
            }
        }

        var expectedLinks = this.Links.Select(
            x =>(Hide: bool.Parse(x.GetMetadata("Hide")), Target: CreateDirectoryInfo(x.GetMetadata("AbsoluteTargetPath")),Source: CreateDirectoryInfo(x.GetMetadata("SourcePath")))).ToArray();
      
        var gitIgnoreFile = new FileInfo(Path.Combine(projectDirectory.FullName, ".gitIgnore"));
        var gitIgnoreLineList = gitIgnoreFile.Exists ? File.ReadAllLines(gitIgnoreFile.FullName).ToList() : new List<string>();

        try
        {
            var existingLinks = GetLinks(projectDirectory,linkComment, gitIgnoreLineList).ToArray();

            var mappings = FullOuterJoin(expectedLinks,existingLinks, x => x.Target.FullName, x => x.LinkedDirectory.FullName,
                (expected, existing,_) => (expected, existing)).ToArray();

            Log( $"Discovered '{expectedLinks.Length}' expected links and '{existingLinks.Length}' existing links. Created '{mappings.Length}' mappings.");

            foreach (var mapping in mappings)
            {
                if (mapping.expected.Target == default)
                {
                    Log($"Remove link '{ mapping.existing.LinkedDirectory.FullName}' ...");
                    mapping.existing.RemoveLink();
                }
                else if (mapping.existing == default)
                {
                    var gitIgnore = mapping.expected.Target.FullName
                        .Replace(projectDirectory.FullName, String.Empty)
                        .Replace(Path.DirectorySeparatorChar, '/');

                    Log($"Add link '{gitIgnore}' to git ignore ...");
                    gitIgnoreLineList.Add(linkComment);
                    gitIgnoreLineList.Add(gitIgnore);

                }
                var expected = mapping.expected;
                if(expected.Target != null)
                {
                    if (expected.Target.Exists)
                    {
                        var actualSource = CreateDirectoryInfo(NativeMethods.GetFinalPathName(expected.Target.FullName));

                        if (actualSource.FullName != expected.Source.FullName)
                        {
                            Log($"Delete link because the link source changed from '{actualSource.FullName}' to '{expected.Source.FullName}'");

                            expected.Target.Delete(true);
                            expected.Target.Refresh();
                        }
                    }

                    if (!expected.Target.Exists)
                    {
                        var message = $"Linking '{expected.Source.FullName}' to '{expected.Target.FullName}'";
                        if (!expected.Target.Parent.Exists)
                            expected.Target.Parent.Create();

                        var startInfo = new ProcessStartInfo(
                            "cmd.exe", 
                            $"/c mklink /J \"{expected.Target.FullName}\" \"{expected.Source.FullName}\"");
                        startInfo.CreateNoWindow = true;

                        var linkProcess = Process.Start(startInfo);
                        linkProcess.WaitForExit();
                        if (linkProcess.ExitCode != 0)
                        {
                            throw new ApplicationException($"{message} failed.");
                        }
                        Log($"{message} successful.");
                        if (expected.Hide)
                        {
                            expected.Target.Refresh();
                            Log($"Hide '{expected.Target.FullName}'");
                            if ((expected.Target.Attributes & FileAttributes.Hidden) != FileAttributes.Hidden)
                            {
                                //Add Hidden flag    
                                expected.Target.Attributes |= FileAttributes.Hidden;
                            }
                        }
                    }
                }
            }

        }
        finally {

            File.WriteAllLines(gitIgnoreFile.FullName, gitIgnoreLineList.Where(x => x != null));
        }
        return true;

    }

    private static DirectoryInfo CreateDirectoryInfo(string directoryPath)
    {
        var absolutePath = Path.GetFullPath(directoryPath).TrimEnd(Path.DirectorySeparatorChar);
        var path = Environment.OSVersion.Platform == PlatformID.Win32NT ? GetWin32LongPath(absolutePath) : absolutePath;
        return new DirectoryInfo(path);
    }

    private static string GetWin32LongPath(string path)
    {
        if (path.StartsWith(@"\\?\")) return path;

        if (path.StartsWith("\\"))
        {
            path = @"\\?\UNC\" + path.Substring(2);
        }
        else if (path.Contains(":"))
        {
            path = @"\\?\" + path;
        }
        else
        {
            var currdir = Environment.CurrentDirectory;
            path = Path.Combine(currdir, path);
            while (path.Contains("\\.\\")) path = path.Replace("\\.\\", "\\");
            path = @"\\?\" + path;
        }
        return path.TrimEnd('.'); ;
    }


    public static IEnumerable<TResult> FullOuterJoin<TA, TB, TKey, TResult>(
        IEnumerable<TA> a,
       IEnumerable<TB> b,
       Func<TA, TKey> selectKeyA,
       Func<TB, TKey> selectKeyB,
       Func<TA, TB, TKey, TResult> projection,
       TA defaultA = default(TA),
       TB defaultB = default(TB),
       IEqualityComparer<TKey> cmp = null)
    {

        cmp = cmp ?? EqualityComparer<TKey>.Default;
        var adict = a.ToDictionary(selectKeyA, cmp);
        var bdict = b.ToDictionary(selectKeyB, cmp);

        var keys = new HashSet<TKey>(adict.Keys, cmp);
        keys.UnionWith(bdict.Keys);

        var join = from key in keys
                   let xa = GetOrDefault(adict,key, defaultA)
                   let xb = GetOrDefault(bdict,key, defaultB)
                   select projection(xa, xb, key);

        return join;
    }

    public static T GetOrDefault<K, T>( IDictionary<K, T> d, K k, T def = default(T))
        => d.TryGetValue(k, out T value) ? value : def;

    public static class NativeMethods
    {
        private static readonly IntPtr INVALID_HANDLE_VALUE = new IntPtr(-1);

        private const uint FILE_READ_EA = 0x0008;
        private const uint FILE_FLAG_BACKUP_SEMANTICS = 0x2000000;

        [DllImport("Kernel32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        static extern uint GetFinalPathNameByHandle(IntPtr hFile, [MarshalAs(UnmanagedType.LPTStr)] StringBuilder lpszFilePath, uint cchFilePath, uint dwFlags);

        [DllImport("kernel32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        static extern bool CloseHandle(IntPtr hObject);

        [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        public static extern IntPtr CreateFile(
                [MarshalAs(UnmanagedType.LPTStr)] string filename,
                [MarshalAs(UnmanagedType.U4)] uint access,
                [MarshalAs(UnmanagedType.U4)] FileShare share,
                IntPtr securityAttributes, // optional SECURITY_ATTRIBUTES struct or IntPtr.Zero
                [MarshalAs(UnmanagedType.U4)] FileMode creationDisposition,
                [MarshalAs(UnmanagedType.U4)] uint flagsAndAttributes,
                IntPtr templateFile);

        public static string GetFinalPathName(string path)
        {
            try
            {
                
                var h = CreateFile(path,
                    FILE_READ_EA,
                    FileShare.ReadWrite | FileShare.Delete,
                    IntPtr.Zero,
                    FileMode.Open,
                    FILE_FLAG_BACKUP_SEMANTICS,
                    IntPtr.Zero);
                if (h == INVALID_HANDLE_VALUE)
                    throw new Win32Exception();

                try
                {
                    var sb = new StringBuilder(1024);
                    var res = GetFinalPathNameByHandle(h, sb, 1024, 0);
                    if (res == 0)
                        throw new Win32Exception();

                    return sb.ToString();
                }
                finally
                {
                    CloseHandle(h);
                }

            }catch(Exception ex)
            {
                throw new ApplicationException($"Unable to get the long path version of '{path}'. See inner exception for more details", ex);
            }
        }
    }
}





]]>
			</Code>
		</Task>
	</UsingTask>

	<PropertyGroup>
		<WebProjectType Condition="'$(WebProjectType)' == ''" ></WebProjectType>
		<!--<HideWebAssetDependencies Condition="'$(HideWebAssetDependencies)' == ''">true</HideWebAssetDependencies>
		<AddDependencyWebAssetsToProject Condition="'$(AddDependencyWebAssetsToProject)' == ''">$(HideWebAssetDependencies.Equals(false))</AddDependencyWebAssetsToProject>
		<HideWebAssetLinkFolders Condition="'$(HideWebAssetLinkFolders)' == ''">$(HideWebAssetDependencies)</HideWebAssetLinkFolders>-->
	</PropertyGroup>

	<PropertyGroup>
		<!--<LinkTargetRootPath Condition="'$(WebProjectType)' == 'BlazorApp'">wwwroot\_content\</LinkTargetRootPath>
		<LinkTargetRootPath Condition="'$(WebProjectType)' == 'RazorLibrary'"></LinkTargetRootPath>-->

		<RelativeDebugLinkRootPath Condition="'$(WebProjectType)' == 'BlazorApp'" >wwwroot\_content\</RelativeDebugLinkRootPath>
		<DebugLinkRootPath>$(MSBuildProjectDirectory)\$(RelativeDebugLinkRootPath)</DebugLinkRootPath>
	</PropertyGroup>
	<ItemGroup>
		<PackageDependencyLink Include="@(StaticWebAsset->HasMetadata('ContentRoot')->HasMetadata('BasePath')->'%(ContentRoot)')">
			<DependencyName>$([System.String]::new('%(BasePath)').Replace('_content/', ''))</DependencyName>
			<SourcePath>%(ContentRoot)</SourcePath>
		</PackageDependencyLink>

		<!--<PackageDependencyLink Include="@(PackageReference->HasMetadata('PackagePath'))">
			<DependencyName>%(Identity)</DependencyName>
			<SourcePath>%(PackagePath)\staticwebassets</SourcePath>
		</PackageDependencyLink>-->
		<ProjectDependencyLink Include="@(ProjectReference)">
			<DependencyName>%(Filename)</DependencyName>
			<SourcePath>%(RootDir)%(Directory)\wwwroot</SourcePath>
		</ProjectDependencyLink>
		<DependencyLinkSource Include="@(PackageDependencyLink);@(ProjectDependencyLink)"/>
		<DependencyLink Include="@(DependencyLinkSource->'%(Identity)|Debug')">
			<GitIgnorePath>$(RelativeDebugLinkRootPath.Replace('\','/'))%(DependencyName)</GitIgnorePath>
			<AbsoluteTargetPath>$(DebugLinkRootPath)%(DependencyName)</AbsoluteTargetPath>
			<LinkExists Condition="Exists(%(AbsoluteTargetPath))">true</LinkExists>
			<Hide>$(RelativeDebugLinkRootPath.Equals(''))</Hide>
		</DependencyLink>
		<!--<DependencyLink Include="@(DependencyLinkSource->'%(Identity)|Compile')">
			<GitIgnorePath>%(DependencyName)</GitIgnorePath>
			<AbsoluteTargetPath>$(MSBuildProjectDirectory)\%(DependencyName)</AbsoluteTargetPath>
			<LinkExists Condition="Exists(%(AbsoluteTargetPath))">true</LinkExists>
			<Hide>$(HideWebAssetDependencies)</Hide>
		</DependencyLink>-->
		<DependencyLinkContentFile Include="@(DependencyLink->WithMetadataValue('LinkExists','true')->'%(AbsoluteTargetPath)\**\*')"/>
	</ItemGroup>

	<ItemGroup>
		<Compile Remove="@(DependencyLinkContentFile)" />
		<Content Remove="@(DependencyLinkContentFile)" />
		<EmbeddedResource Remove="@(DependencyLinkContentFile)" />
		<TypeScriptCompile Remove="@(DependencyLinkContentFile)" />
		<None  Remove="@(DependencyLinkContentFile)" />
		<!--<None
			Include="$(MSBuildProjectDirectory)\**\*.ts;$(MSBuildProjectDirectory)\**\*.js"
			Exclude="$(MSBuildProjectDirectory)\wwwroot\**"
			/>-->
		<None
			Condition="'$(RelativeDebugLinkRootPath)' != ''"
			Include="$(MSBuildProjectDirectory)\$(RelativeDebugLinkRootPath)\**\*.ts;$(MSBuildProjectDirectory)\$(RelativeDebugLinkRootPath)\**\*.js"
			/>
	</ItemGroup>
	<ItemGroup>
		<!--<None  Remove="@(DependencyLinkContentFile->WithMetadataValue('Hide','true'))" />-->
	</ItemGroup>

	<Target Name="CreateLinks" BeforeTargets="BeforeBuild" >
		<ManageLinks Links="@(DependencyLink->'%(AbsoluteTargetPath)'->Distinct())" ProjectDirectoryPath="$(MSBuildProjectDirectory)"/>

	<!--We need to exclude the linked assets in Blazor apps for debugging purposes from 
	the static web asset handling, because it would result in duplicates-->
    <PropertyGroup>
		<ResolveCurrentProjectStaticWebAssetsInputsDependsOn>
			$(ResolveCurrentProjectStaticWebAssetsInputsDependsOn);ExcludeLinkedWebAssets;</ResolveCurrentProjectStaticWebAssetsInputsDependsOn>
	</PropertyGroup>

	<Target Name="ExcludeLinkedWebAssets" >
		<ItemGroup>
			<Content Remove="wwwroot\_content\**"/>
			<ContentWithTargetPath Remove="wwwroot\_content\**"/>
		</ItemGroup>
	</Target>
	<!--done-->
	
	</Target>
</Project>