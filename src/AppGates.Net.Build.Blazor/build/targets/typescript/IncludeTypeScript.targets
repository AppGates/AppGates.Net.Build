<Project>
	<PropertyGroup>
		<!--this property seems not to exists in .net6 anymore.-->
		<ResolveCurrentProjectStaticWebAssetsInputsDependsOn>
			CompileTypeScript;
			$(ResolveCurrentProjectStaticWebAssetsInputs)
		</ResolveCurrentProjectStaticWebAssetsInputsDependsOn>
		<TypeScriptRootDirectory Condition="'$(TypeScriptRootDirectory)' == ''">$(MSBuildProjectDirectory)\wwwroot\</TypeScriptRootDirectory>
	</PropertyGroup>


	<!--New workaround to reference packages within build packages:
	1. Set the reference as dependency on the build package project (see AppGates.Net.Build.Blazor.csproj)
	2. Reference the dependency within the target with GeneratePathProperty=true, don't include any asset (which doesn't get pulled anyway)
	3. Import the build/[package].props and build /[package].targets based on the generated path property.-->
	<ItemGroup>
		<PackageReference Include="Microsoft.TypeScript.MSBuild" Version="*"  
						  GeneratePathProperty="true" IncludeAssets="None" PrivateAssets="all" />
	</ItemGroup>
	<PropertyGroup>
		<TypeScriptPackageTargetPathWithoutExtension>$(PkgMicrosoft_TypeScript_MSBuild)\build\Microsoft.TypeScript.MSBuild</TypeScriptPackageTargetPathWithoutExtension>
	</PropertyGroup>
	<Import Project="$(TypeScriptPackageTargetPathWithoutExtension).props" />


	<!--[Add Typescript files to the RCL package]: by default compiled *.ts files are not included in the nuget package. But we want to add them so that we can debug into them from the consumer side.-->
	<PropertyGroup>
		<ResolveStaticWebAssetsInputsDependsOn>AddTypescriptFilesToContent;$(ResolveStaticWebAssetsInputsDependsOn)</ResolveStaticWebAssetsInputsDependsOn>
	</PropertyGroup>

	<Target Name="AddTypescriptFilesToContent"  BeforeTargets="ResolveCurrentProjectStaticWebAssetsInputs">
		<ItemGroup>
			<Content Include="@(TypeScriptCompile)" Exclude="@(Content)"
					 ExcludeFromSingleFile="true" Pack="false" CopyToPublishDirectory="PreserveNewest"/>
		</ItemGroup>
	</Target>
	
	<!--Workaround for the typescript output files (*.js, *.js.map) The content items are produced with full path,
	but ResolveCurrentProjectStaticWebAssetsInputs expects items with relative path--> 
	<Target Name="IncludeContentWithFullPath" BeforeTargets="ResolveCurrentProjectStaticWebAssetsInputs">
		<ItemGroup>
			<ContentToModify  Include="@(Content)" Condition="$([System.String]::Copy('%(Identity)').Replace('\','/').Contains('/wwwroot/'))">
				<RelativeWwwrootPath>$([MSBuild]::MakeRelative('$(MSBuildProjectDirectory)', '%(Identity)'))</RelativeWwwrootPath>
			</ContentToModify>
			<Content Remove="@(ContentToModify)"></Content>
			<Content Include="@(ContentToModify->'%(RelativeWwwrootPath)')"/>
		</ItemGroup>
	</Target>
	
	<!--End - [Add Typescript files to the RCL package]-->


	<Target Name="CopyTsConfigs" BeforeTargets="FindConfigFiles">
		<Copy Condition="Exists('$(TypeScriptRootDirectory)\tsconfig.json') == false"
			  SourceFiles="$(MSBuildThisFileDirectory)\tsconfig.json"
			  DestinationFolder="$(TypeScriptRootDirectory)" />

	</Target>


	<!--Typescript compilation against linked dependencies causes the emitted js of those dependencies packaged as content files
	We want to avoid that-->
	<Target Name="RemoveUnwantedContent" BeforeTargets="GetTypeScriptOutputForPublishing">
		<ItemGroup>
			<JavascriptNotToRemove Include="$(MSBuildProjectDirectory)/wwwroot/**"/>
			<!--for linux-->
			<JavascriptNotToRemove Include="wwwroot\**"/>
			<!--for windows-->
			<JavascriptToRemove  Include="@(GeneratedJavascript)" Exclude="@(JavascriptNotToRemove)"/>
			<GeneratedJavascript Remove="@(JavascriptToRemove)"/>

		</ItemGroup>
	</Target>
	<Import Project="$(TypeScriptPackageTargetPathWithoutExtension).targets" />

</Project>