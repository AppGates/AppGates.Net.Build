<Project>

  <PropertyGroup>
    <IsPackable>false</IsPackable>
    <EnableDefaultItems>false</EnableDefaultItems>
    <GenerateDependencyFile>False</GenerateDependencyFile>
    <AdditionalBuildArguments Condition="'$(AdditionalBuildArguments)' == ''"></AdditionalBuildArguments>
  </PropertyGroup>

  <Target Name="PackSolution" AfterTargets="Pack" Condition="'$(SkipSolutionOperation)' != 'true'">
    <PropertyGroup>
      <PipelineEntryTarget>PackSolution</PipelineEntryTarget>
    </PropertyGroup>
    
    <ItemGroup>
      <SolutionFileToPack Include="src\*.sln" />
      <InnerBuildCommand Include="@(SolutionFileToPack->'dotnet pack %(Identity) /p:SkipSolutionOperation=true $(AdditionalBuildArguments)')"/>
    </ItemGroup>

    <Message Text="Pipeline Entry Target: $(PipelineEntryTarget)" Importance="high"/>
    <Message Text="Inner Build Command: %(InnerBuildCommand.Identity)" Importance="high"/>
    <Exec Command="%(InnerBuildCommand.Identity)" />
  </Target>

  <Target Name="BuildSolution" AfterTargets="Build" Condition="'$(BuildingInsideVisualStudio)' != 'true' AND '$(SkipSolutionOperation)' != 'true'">
    <PropertyGroup>
      <PipelineEntryTarget>BuildSolution</PipelineEntryTarget>
    </PropertyGroup>
    
    <ItemGroup>
      <SolutionFileToPack Include="src\*.sln" />
      <InnerBuildCommand Condition="'$(BuildingInsideVisualStudio)' != 'true'"
                      Include="@(SolutionFileToPack->'dotnet restore %(Identity) --force-evaluate /p:SkipSolutionOperation=true')" />
      <InnerBuildCommand Include="@(SolutionFileToPack->'dotnet build %(SolutionFileToPack.Identity) /p:SkipSolutionOperation=true $(AdditionalBuildArguments)')"/>
    </ItemGroup>

    <Message Text="Pipeline Entry Target: $(PipelineEntryTarget)" Importance="high"/>
    <Message Text="Inner Build Command: %(InnerBuildCommand.Identity)" Importance="high"/>
    <Exec Command="%(InnerBuildCommand.Identity)" />
  </Target>

  <Target Name="Test" AfterTargets="VSTest" Condition="'$(BuildingInsideVisualStudio)' != 'true' AND '$(SkipSolutionOperation)' != 'true'">
    <PropertyGroup>
      <PipelineEntryTarget>Test</PipelineEntryTarget>
    </PropertyGroup>
    
    <ItemGroup>
      <SolutionFileToPack Include="src\*.sln" />
      <InnerBuildCommand Include="dotnet test %(SolutionFileToPack.Identity) /p:SkipSolutionOperation=true $(AdditionalBuildArguments)" />
    </ItemGroup>
    
    <Message Text="Pipeline Entry Target: $(PipelineEntryTarget)" Importance="high"/>
    <Message Text="Inner Build Command: %(InnerBuildCommand.Identity)" Importance="high"/>
    <Exec Command="%(InnerBuildCommand.Identity)" />
  </Target>

  <ItemGroup>
    <TestPackage Include="$(PackageOutputPath)\*.Tests.*.nupkg" />
  </ItemGroup>

  <Target Name="PackageTest" Condition="@(TestPackage-&gt;Count()) &gt; 0">
    <PropertyGroup>
      <TestIndicator>.Tests</TestIndicator>
      <!--<SemVerRegEx><![CDATA[^((?in)^(?<Major>0|[1-9]\d*)\.(?<Minor>0|[1-9]\d*)\.(?<Patch>0|[1-9]\d*)(?<PreReleaseTagWithSeparator>-(?<PreReleaseTag>([a-z-][\da-z-]+|[\da-z-]+[a-z-][\da-z-]*|0|[1-9]\d*)(\.([a-z-][\da-z-]+|[\da-z-]+[a-z-][\da-z-]*|0|[1-9]\d*))*))?(?<BuildMetadataWithSeparator>\+(?<BuildMetadata>[\da-z-]+(\.[\da-z-]+)*))?$)$]]></SemVerRegEx>-->
    </PropertyGroup>
    <ItemGroup>
      <TestPackage_Hlp Include="@(TestPackage)">
        <SplitIndex>$([System.String]::new('%(Filename)').IndexOf('$(TestIndicator).'))</SplitIndex>
        <PackageName>$([System.String]::new('%(Filename)').Substring(0,%(TestPackage_Hlp.SplitIndex)))$(TestIndicator)</PackageName>
        <Version>$([System.String]::new('%(Filename)').Replace('%(TestPackage_Hlp.PackageName).',''))</Version>
        <!--<Version>$([System.Text.RegularExpressions.Regex]::Match('%(Filename)', '$(SemVerRegEx)'))</Version>-->
        <!--<Name>$([System.String]::Copy('%(Filename)').Replace('%(TestPackageExtended.Version)', ''))</Name>-->
      </TestPackage_Hlp>

      <TestPackageExtended Include="@(TestPackage_Hlp->'%(PackageName)')">
      </TestPackageExtended>
    </ItemGroup>
    <PropertyGroup>
      <TestRunProjectDirectory>$(BaseIntermediateOutputPath)\TestRun\%(TestPackageExtended.PackageName)\</TestRunProjectDirectory>
      <TestTargetFramework Condition="'$(TestTargetFramework)' == ''">net50</TestTargetFramework>
      <TestRunProjectTemplate>
        <![CDATA[
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>[TestTargetFramework]</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
     <PackageReference Include="Microsoft.NET.Test.Sdk" Version="*"/>
     <PackageReference Include="NUnit3TestAdapter" Version="*"/>
     <PackageReference Include="[TestPackageName]" Version="[TestPackageVersion]"/>
  </ItemGroup>
</Project>
      ]]>
      </TestRunProjectTemplate>
      <TestRunProjectContent>$(TestRunProjectTemplate.Replace('[TestTargetFramework]','$(TestTargetFramework)').Replace('[TestPackageName]','%(TestPackageExtended.PackageName)').Replace('[TestPackageVersion]','%(TestPackageExtended.Version)'))</TestRunProjectContent>
      <CreateEnvironmentCommand>dotnet</CreateEnvironmentCommand>
      <TestCaseFilter Condition="'$(TestCaseFilter)' == ''">"(TestCategory=CiTest)%26(TestCategory!=NoCiTest)"</TestCaseFilter>
      <TestResultsPath Condition="'$(TestResultsPath)' == ''">$([System.IO.Path]::GetFullPath('$(PackageOutputPath)\..\test'))</TestResultsPath>

      <RestoreTestCommand>dotnet publish --force -o "publish"</RestoreTestCommand>
      <PackageTestCommand>dotnet vstest "%(TestPackageExtended.PackageName).dll" --logger:"trx;LogFileName=%(TestPackageExtended.PackageName).trx" --ResultsDirectory:"$(TestResultsPath)" --TestCaseFilter:$(TestCaseFilter)</PackageTestCommand>
    </PropertyGroup>
    <Message Text="TestPropertyx: $(TestPropertyx)" Importance="high" />
    <Message Text="TestPackage: %(TestPackageExtended.PackageName) / %(TestPackageExtended.Version) / %(TestPackageExtended.Filename)" Importance="high" />
    <WriteLinesToFile File="$(TestRunProjectDirectory)TestRun.csproj" Lines="$(TestRunProjectContent)" Overwrite="true" />
    <Message Text="TestRun Project:" Importance="high" />
    <Message Text="$(TestRunProjectContent)" Importance="high" />
    <Message Text="[$(TestRunProjectDirectory)] $(RestoreTestCommand)" Importance="high" />
    <Exec Command="$(RestoreTestCommand)" WorkingDirectory="$(TestRunProjectDirectory)" />
    <PropertyGroup>
      <TestBinaryDirectory>$(TestRunProjectDirectory)\publish</TestBinaryDirectory>
    </PropertyGroup>
    <Copy SourceFiles="$(TestBinaryDirectory)\TestRun.runtimeconfig.json" DestinationFiles="$(TestBinaryDirectory)\%(TestPackageExtended.PackageName).runtimeconfig.json" />
    <Message Text="[$(TestBinaryDirectory)] $(PackageTestCommand)" Importance="high" />
    <Exec Command="$(PackageTestCommand)" WorkingDirectory="$(TestBinaryDirectory)" />

  </Target>


  <Target Name="CleanSolution" AfterTargets="CleanOnly" Condition="'$(SkipSolutionOperation)' != 'true'">
    <Message Importance="high" Text="Clear nuget http-cache...." />
    <Exec Command="dotnet nuget locals http-cache --clear" />
    <ItemGroup>
      <SolutionFileToPack Include="src\*.sln" />
    </ItemGroup>
    <Exec Command="dotnet restore %(SolutionFileToPack.Identity) --force-evaluate /p:SkipSolutionOperation=true $(AdditionalBuildArguments)" />

  </Target>

  <Target Name="Push" Condition="'$(SkipSolutionOperation)' != 'true'">
    <ItemGroup>
      <PackageToPush Include="$(PackageOutputPath)\*.nupkg" Exclude="$(PackageOutputPath)\*.Tests.nupkg" />
    </ItemGroup>
    <Message Text="Push: %(PackageToPush.Identity)" Importance="high"/>
    <PropertyGroup>
      <PipelineEntryTarget>Push</PipelineEntryTarget>
      <InnerBuildCommand>dotnet build /t:PushPackage %(PackageToPush.Identity) /p:SkipSolutionOperation=true $(AdditionalBuildArguments)</InnerBuildCommand>
    </PropertyGroup>
    <CallTarget Targets="LogPipelineEntry"/>
    <Exec Command="$(InnerBuildCommand)" />
  </Target>


  <Target Name="DeployPages">
    <ItemGroup>
      <InputFile Include="*.*"/>
    </ItemGroup>
    <Message Text ="Deployed: %(InputFile.Identity)" Importance="high"/>

    <Unzip SourceFiles="$(PackageOutputPath)\pages.zip" DestinationFolder="public"/>

    <ItemGroup>
      <DeployedFile Include="public\**\*.*"/>
    </ItemGroup>
    <Message Text ="Deployed: %(DeployedFile.Identity)" Importance="high"/>
  </Target>

  <Target Name="LogPipelineEntry">
    <Message Text="Pipeline Entry Target: $(PipelineEntryTarget)" Importance="high"/>
    <Message Text="Pipeline Inner Build Command(s): $(InnerBuildCommand)" Importance="high"/>
  </Target>
</Project>