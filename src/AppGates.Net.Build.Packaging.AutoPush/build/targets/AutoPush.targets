<Project>

  <PropertyGroup>
    <Nuget_AutoPushEnabled Condition="'$(Nuget_AutoPushEnabled)' == ''">$(BuildingInsideVisualStudio.Equals('True'))</Nuget_AutoPushEnabled>
    <Nuget_AutoPushPublishLevels Condition="'$(Nuget_AutoPushPublishLevels)' == ''">global</Nuget_AutoPushPublishLevels>

  </PropertyGroup>

  <!--Project Repository-->
  <PropertyGroup>
    <Nuget_Push_ProjectRepository_ServerUrl Condition="'$(Nuget_Push_ProjectRepository_ServerUrl)' == ''">$(CI_SERVER_URL)</Nuget_Push_ProjectRepository_ServerUrl>
    <Nuget_Push_ProjectRepository_Id Condition="'$(Nuget_Push_ProjectRepository_Id)' == ''">$(CI_PROJECT_ID)</Nuget_Push_ProjectRepository_Id>
    <Nuget_Push_ProjectRepository_Url
      Condition="'$(Nuget_Push_ProjectRepository_Id)' != '' AND '$(Nuget_Push_ProjectRepository_Url)' != ''">$(Nuget_Push_ProjectRepository_ServerUrl)/api/v4/projects/$(Nuget_Push_ProjectRepository_Id)/packages/nuget/index.json</Nuget_Push_ProjectRepository_Url>

    <Nuget_Push_ProjectRepository_Username
      Condition="'$(Nuget_Push_ProjectRepository_Username)' == ''">$(CI_DEPLOY_USER)</Nuget_Push_ProjectRepository_Username>

    <Nuget_Push_ProjectRepository_Username
      Condition="'$(Nuget_Push_ProjectRepository_Username)' == ''">PushUser</Nuget_Push_ProjectRepository_Username>

    <Nuget_Push_ProjectRepository_Password
     Condition="'$(Nuget_Push_ProjectRepository_Password)' == ''">$(CI_DEPLOY_PASSWORD)</Nuget_Push_ProjectRepository_Password>

    <Nuget_Push_ProjectRepository_Password
      Condition="'$(Nuget_Push_ProjectRepository_Password)' == ''">$(CI_JOB_TOKEN)</Nuget_Push_ProjectRepository_Password>

  </PropertyGroup>
  <!--nuget org-->
  <PropertyGroup>
    <Nuget_Push_NugetOrgRepository_Url Condition="'$(Nuget_Push_NugetOrgRepository_Url)' == ''">https://api.nuget.org/v3/index.json</Nuget_Push_NugetOrgRepository_Url>
  </PropertyGroup>
  <ItemGroup>
    <Nuget_PushSource Include="NugetOrg" Condition="'$(Nuget_Push_NugetOrgRepository_Token)' != ''">
      <Address>$(Nuget_Push_NugetOrgRepository_Url)</Address>
      <PublishLevel>global</PublishLevel>
      <ApiKey>$(Nuget_Push_NugetOrgRepository_Token)</ApiKey>
      <Enabled>true</Enabled>
    </Nuget_PushSource>
    <Nuget_PushSource Include="ProjectRepository" Condition="'$(Nuget_Push_ProjectRepository_Url)' != ''">
      <Address>$(Nuget_Push_ProjectRepository_Url)</Address>
      <PublishLevel>internal</PublishLevel>
      <Username>$(Nuget_Push_ProjectRepository_Username)</Username>
      <Password>$(Nuget_Push_ProjectRepository_Password)</Password>
      <Enabled>true</Enabled>
    </Nuget_PushSource>
    <Nuget_PushSource Include="Default" Condition="'$(Nuget_AutoPush_DefaultSource_Address)' != ''">
      <Address>$(Nuget_AutoPush_DefaultSource_Address)</Address>
      <Username Condition="'$(Nuget_AutoPush_DefaultSource_Username)' != ''">$(Nuget_AutoPush_DefaultSource_Username)</Username>
      <Password Condition="'$(Nuget_AutoPush_DefaultSource_Password)' != ''">$(Nuget_AutoPush_DefaultSource_Password)</Password>
      <ApiKey Condition="'$(Nuget_AutoPush_DefaultSource_ApiKey)' != ''">$(Nuget_AutoPush_DefaultSource_ApiKey)</ApiKey>
      <Enabled>true</Enabled>
    </Nuget_PushSource>
  </ItemGroup>

  <Target Name="LogAutoPushSettings"  BeforeTargets="AutoPush" Condition="'$(IsPackable)' == 'true'">
    <Message Importance="$(BuildSdkLogPriority)" Text="Nuget_AutoPushEnabled is set to: '$(Nuget_AutoPushEnabled)'. To activate it set the environment variable or msbuild property Nuget_AutoPushEnabled to true."></Message>
    <Message Condition="'$(Nuget_AutoPushEnabled)' == 'true' AND '@(Nuget_AutoPushSource)' != ''" Importance="$(BuildSdkLogPriority)" Text="Pushing to sources '@(Nuget_AutoPushSource)' you can change it by adding items to the 'Nuget_AutoPushSource' item group. The identity is the name of the source, possible MetaData Items are: Address, Username/Password or ApiKey."></Message>
  </Target>

  <Target Name="AutoPush" AfterTargets="Pack" Condition="'$(Nuget_AutoPushEnabled)' == 'true' AND '$(IsPackable)' == 'true'">

    <ItemGroup>
      <Nuget_PushSource Condition="$(Nuget_AutoPushPublishLevels.Contains('%(Nuget_AutoPushSource.PublishLevel)'))"
                        Update="@(Nuget_AutoPushSource->HasMetadata('PublishLevel'))">
        <Enabled>true</Enabled>
      </Nuget_PushSource>
    </ItemGroup>
  </Target>

  <Target Name="PushPackage" AfterTargets="AutoPush" Condition="'$(IsPackable)' != 'false'">

    <ItemGroup Condition="'@(PackageToPush)' == ''">
      <PackageToPush Include="$(PackageOutputPath.TrimEnd('\').TrimEnd('/'))\$(PackageId).$(PackageVersion).nupkg"/>
    </ItemGroup>

    <ItemGroup>
      <Nuget_PushSource_Enabled Include="@(Nuget_PushSource->HasMetadata('Enabled')->WithMetadataValue('Enabled','true'))"/>

      <Nuget_PushSource_WithBasicAuth Include="@(Nuget_PushSource_Enabled->HasMetadata('Password'))"/>
      <Nuget_PushSource_WithApiKeyAuth Include="@(Nuget_PushSource_Enabled->HasMetadata('ApiKey'))"/>
      <Nuget_PushSource_WithNoAuth Include="@(Nuget_PushSource_Enabled)" Exclude="@(Nuget_PushSource_WithBasicAuth);@(Nuget_PushSource_WithApiKeyAuth)"/>
    </ItemGroup>

    <PropertyGroup>
      <PushNugetConfigPath>$(IntermediateOutputPath)\nuget.config</PushNugetConfigPath>
    </PropertyGroup>

    <Message  Condition="'@(Nuget_PushSource)' != ''" Importance="high" Text="Available Push Source: %(Nuget_PushSource.Identity)" />

    <!--<Message  Condition="'@(Nuget_PushSource_Enabled)' != ''" Importance="high" Text="Pushing to %(Nuget_PushSource.Identity) (%(Nuget_PushSource_Enabled.Address))..." />-->

    <!--with config (basic auth)-->
    <Delete Condition="'@(Nuget_PushSource_WithBasicAuth)' != ''" Files="$(PushNugetConfigPath)"/>

    <Exec Condition="'@(Nuget_PushSource_WithBasicAuth)' != ''"  WorkingDirectory="$(IntermediateOutputPath)"
          Command="dotnet new nugetconfig" ></Exec>

    <Exec Condition="'@(Nuget_PushSource_WithBasicAuth)' != ''"  WorkingDirectory="$(IntermediateOutputPath)"
          Command="dotnet nuget add source %(Nuget_PushSource_WithBasicAuth.Address) -n %(Nuget_PushSource_WithBasicAuth.Identity) -u %(Nuget_PushSource_WithBasicAuth.Username) -p %(Nuget_PushSource_WithBasicAuth.Password) --store-password-in-clear-text" ></Exec>

    <Message Condition="'@(Nuget_PushSource_WithBasicAuth)' != ''"  Importance="high" Text="Generated config '$(PushNugetConfigPath)':"/>
    <Message Condition="'@(Nuget_PushSource_WithBasicAuth)' != ''"  Importance="high" Text="$([System.IO.File]::ReadAllText('$(PushNugetConfigPath)'))"/>

    <Exec Condition="'@(Nuget_PushSource_WithBasicAuth)' != ''" WorkingDirectory="$(IntermediateOutputPath)"
          Command="dotnet nuget push @(PackageToPush->'%(Identity)') --skip-duplicate --source %(Nuget_PushSource_WithBasicAuth.Identity)" />

    <!--with api key-->
    <Exec Condition="'@(Nuget_PushSource_WithApiKeyAuth)' != ''"
          Command="dotnet nuget push @(PackageToPush->'%(Identity)') --skip-duplicate --source %(Nuget_PushSource_WithApiKeyAuth.Address) --api-key %(Nuget_PushSource_WithApiKeyAuth.ApiKey)" />

    <!--without auth-->
    <Exec Condition="'@(Nuget_PushSource_WithNoAuth)' != ''"
          Command="dotnet nuget push @(PackageToPush->'%(Identity)') --source %(Nuget_PushSource_WithNoAuth.Address)" />
  </Target>
</Project>